package construction;

import grafika.Grafika;

import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;

public class Images {
	Grafika parent;
	
	public static final int AND = 0;
	public static final int OR = 1;
	public static final int NAND = 2;
	public static final int NOR = 3;
	public static final int XOR = 4;
	public static final int XNOR = 5;
	public static final int NOT = 6;
	public static final int GND = 7;
	public static final int VCC = 8;
	
//	public static ImageIcon imageIconAND = null;
//	public static ImageIcon imageIconOR = null;
//	public static ImageIcon imageIconNAND = null;
//	public static ImageIcon imageIconNOR = null;
//	public static ImageIcon imageIconXOR = null;
//	public static ImageIcon imageIconXNOR = null;
//	public static ImageIcon imageIconNOT = null;
//	public static ImageIcon imageIconGND = null;
//	public static ImageIcon imageIconVCC = null;
	
	public static ImageIcon imageIconAND = createImageIcon("../grafika/logicalOperators/andV.png");
	public static ImageIcon imageIconOR = createImageIcon("../grafika/logicalOperators/orV.png");
	public static ImageIcon imageIconNAND = createImageIcon("../grafika/logicalOperators/nandV.png");
	public static ImageIcon imageIconNOR = createImageIcon("../grafika/logicalOperators/norV.png");
	public static ImageIcon imageIconXOR = createImageIcon("../grafika/logicalOperators/xorV.png");
	public static ImageIcon imageIconXNOR = createImageIcon("../grafika/logicalOperators/xnorV.png");
	public static ImageIcon imageIconNOT =  createImageIcon("../grafika/logicalOperators/notV.png");
	public static ImageIcon imageIconGND = createImageIcon("../grafika/logicalOperators/gnd.png");
	public static ImageIcon imageIconVCC = createImageIcon("../grafika/logicalOperators/vcc.png");
	
	//public ToolTips toolTipAND;
	public static BufferedImage toolTipAND = toolTipImage(new File("grafika/logicalOperators/andTruthTable.png"));
	public static BufferedImage toolTipOR = toolTipImage(new File("grafika/logicalOperators/orTruthTable.png"));
	public static BufferedImage toolTipNAND = toolTipImage(new File("grafika/logicalOperators/nandTruthTable.png"));
	public static BufferedImage toolTipNOR = toolTipImage(new File("grafika/logicalOperators/norTruthTable.png"));
	public static BufferedImage toolTipXOR = toolTipImage(new File("grafika/logicalOperators/xorTruthTable.png"));
	public static BufferedImage toolTipXNOR = toolTipImage(new File("grafika/logicalOperators/xnorTruthTable.png"));
	public static BufferedImage toolTipNOT = toolTipImage(new File("grafika/logicalOperators/notTruthTable.png"));
//	public static BufferedImage toolTipGND = toolTipImage(new File("grafika/logicalOperators/gndTruthTable.png"));
//	public static BufferedImage toolTipVCC = toolTipImage(new File("grafika/logicalOperators/vccTruthTable.png"));
	
	public BufferedImage elementImageAND;
	public BufferedImage elementImageOR;
	public BufferedImage elementImageNAND;
	public BufferedImage elementImageNOR;
	public BufferedImage elementImageXOR;
	public BufferedImage elementImageXNOR;
	public BufferedImage elementImageNOT;
	public BufferedImage elementImageGND;
	public BufferedImage elementImageVCC;
	//symbol = new File("grafika/logicalOperators/and.png");
	
	public Images(Grafika myparent) {
		parent = myparent;
		
		// Button images
//	  	this.imageIconAND = createImageIcon("../grafika/logicalOperators/andV.png");
//	  	this.imageIconOR = createImageIcon("../grafika/logicalOperators/orV.png");
//	  	this.imageIconNAND = createImageIcon("../grafika/logicalOperators/nandV.png");
//	  	this.imageIconNOR = createImageIcon("../grafika/logicalOperators/norV.png");
//	  	this.imageIconXOR = createImageIcon("../grafika/logicalOperators/xorV.png");
//	  	this.imageIconXNOR = createImageIcon("../grafika/logicalOperators/xnorV.png");
//	  	this.imageIconNOT = createImageIcon("../grafika/logicalOperators/notV.png");
//	  	this.imageIconGND = createImageIcon("../grafika/logicalOperators/gnd.png");
//	  	this.imageIconVCC = createImageIcon("../grafika/logicalOperators/vcc.png");
	  	
		// Tooltip images
		//this.toolTipAND = new ToolTips("file:grafika/logicalOperators/andTruthTable.png");
		// this.toolTipAND = toolTipImage(new File("grafika/logicalOperators/andTruthTable.png"));
//		this.toolTipOR = new ToolTips("file:grafika/logicalOperators/orTruthTable.png");
//		this.toolTipNAND = new ToolTips("file:grafika/logicalOperators/nandTruthTable.png");
//		this.toolTipNOR = new ToolTips("file:grafika/logicalOperators/norTruthTable.png");
//		this.toolTipXOR = new ToolTips("file:grafika/logicalOperators/xorTruthTable.png");
//		this.toolTipXNOR = new ToolTips("file:grafika/logicalOperators/xnorTruthTable.png");
//		this.toolTipNOT = new ToolTips("file:grafika/logicalOperators/notTruthTable.png");

		//  Element images
		this.elementImageAND = elementImage(new File("grafika/logicalOperators/and.png"));
		this.elementImageOR = elementImage(new File("grafika/logicalOperators/or.png"));
		this.elementImageNAND = elementImage(new File("grafika/logicalOperators/nand.png"));
		this.elementImageNOR = elementImage(new File("grafika/logicalOperators/nor.png"));
		this.elementImageXOR = elementImage(new File("grafika/logicalOperators/xor.png"));
		this.elementImageXNOR = elementImage(new File("grafika/logicalOperators/xnor.png"));
		this.elementImageNOT = elementImage(new File("grafika/logicalOperators/not.png"));
		this.elementImageGND = elementImage(new File("grafika/logicalOperators/gnd.png"));
		this.elementImageVCC = elementImage(new File("grafika/logicalOperators/vcc.png"));
	}
	
	private BufferedImage elementImage(File image_path) {
		try {
			return ImageIO.read(image_path);
		}
		catch (IOException e1) {
			e1.printStackTrace();
		}
		return null;
	}
	
	private static BufferedImage toolTipImage(File image_path) {
		try {
			return ImageIO.read(image_path);
		}
		catch (IOException e1) {
			e1.printStackTrace();
		}
		return null;
	}
	
    /** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = Grafika.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
}
